import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "../components/ui/card";
import { Button } from "../components/ui/button";
import { Badge } from "../components/ui/badge";
import { Skeleton } from "../components/ui/skeleton";
import { ArrowLeft, Eye, Edit, Share2, BarChart3 } from "lucide-react";
import { useToast } from "../hooks/use-toast";
import { useLanguage } from "../contexts/LanguageContext";
import { fetchQuestionnaireForPreview } from "../services/questionnaires";

interface Question {
  id: string;
  question_text: string;
  question_type: string;
  is_required: boolean;
  question_order: number;
  options?: Option[];
}

interface Option {
  id: string;
  label: string;
  value: string;
  order_index: number;
}

interface Questionnaire {
  id: string;
  title: string;
  name?: string;
  category?: string;
  status?: string;
  created_at: string;
  updated_at?: string;
  is_published?: boolean;
  public_token?: string;
  meta?: any;
  questions: Question[];
}

export default function QuestionnairePreviewPage() {
  const { id } = useParams();
  const navigate = useNavigate();
  const { toast } = useToast();
  const { language } = useLanguage();
  
  const [questionnaire, setQuestionnaire] = useState<Questionnaire | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!id) {
      navigate('/questionnaire-review');
      return;
    }

    loadQuestionnaire();
  }, [id]);

  const loadQuestionnaire = async () => {
    try {
      setLoading(true);
      console.log('🔄 Loading questionnaire for preview...');
      
      const data = await fetchQuestionnaireForPreview(id!);
      console.log('✅ Questionnaire loaded for preview:', data);
      
      setQuestionnaire(data);
    } catch (error: any) {
      console.error('❌ Error loading questionnaire:', error);
      toast({
        title: language === 'he' ? 'שגיאה בטעינה' : 'Loading Error',
        description: language === 'he' 
          ? 'לא ניתן היה לטעון את השאלון' 
          : 'Could not load questionnaire',
        variant: 'destructive'
      });
      
      // חזור לדף הסקירה
      navigate('/questionnaire-review');
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = () => {
    navigate(`/onboarding?step=2&id=${id}`);
  };

  const handleReview = () => {
    navigate(`/questionnaires/${id}/review`);
  };

  const handleShare = () => {
    navigate(`/questionnaires/${id}/share`);
  };

  const handleResponses = () => {
    navigate(`/questionnaires/${id}/responses`);
  };

  const getQuestionTitle = (questionnaire: Questionnaire) => {
    return questionnaire.title || 
           questionnaire.name || 
           (questionnaire.meta && questionnaire.meta.title) ||
           (language === 'he' ? 'ללא כותרת' : 'Untitled');
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-background" dir={language === 'he' ? 'rtl' : 'ltr'}>
        <div className="max-w-4xl mx-auto p-6 space-y-6">
          <Skeleton className="h-12 w-full" />
          <div className="space-y-4">
            {Array.from({ length: 5 }).map((_, i) => (
              <Skeleton key={i} className="h-32 w-full" />
            ))}
          </div>
        </div>
      </div>
    );
  }

  if (!questionnaire) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center" dir={language === 'he' ? 'rtl' : 'ltr'}>
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-4">
            {language === 'he' ? 'שאלון לא נמצא' : 'Questionnaire Not Found'}
          </h2>
          <Button onClick={() => navigate('/questionnaire-review')}>
            {language === 'he' ? 'חזרה לסקירה' : 'Back to Review'}
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background" dir={language === 'he' ? 'rtl' : 'ltr'}>
      <div className="max-w-4xl mx-auto p-6 space-y-6">
        {/* Header */}
        <div className="space-y-4">
          <div className="flex items-center gap-4">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => navigate('/questionnaire-review')}
              className="gap-2"
            >
              <ArrowLeft className={`h-4 w-4 ${language === 'he' ? 'rotate-180' : ''}`} />
              {language === 'he' ? 'חזרה לסקירה' : 'Back to Review'}
            </Button>
          </div>

          <Card className="border-2 border-primary/20 bg-gradient-to-r from-primary/5 to-secondary/5">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="flex items-center gap-3 text-2xl">
                    <Eye className="h-7 w-7" />
                    <span>{getQuestionTitle(questionnaire)}</span>
                    <Badge variant={questionnaire.is_published ? "default" : "secondary"}>
                      {questionnaire.is_published 
                        ? (language === 'he' ? 'פורסם' : 'Published')
                        : (language === 'he' ? 'טיוטה' : 'Draft')
                      }
                    </Badge>
                  </CardTitle>
                  <CardDescription className="text-lg">
                    {language === 'he' 
                      ? 'תצוגה מקדימה של השאלון' 
                      : 'Questionnaire Preview'
                    }
                  </CardDescription>
                </div>
                
                <div className="flex gap-2">
                  <Button onClick={handleEdit} variant="outline" size="sm" className="gap-2">
                    <Edit className="h-4 w-4" />
                    {language === 'he' ? 'ערוך' : 'Edit'}
                  </Button>
                  
                  <Button onClick={handleReview} variant="outline" size="sm" className="gap-2">
                    <Eye className="h-4 w-4" />
                    {language === 'he' ? 'סקירה' : 'Review'}
                  </Button>
                  
                  <Button onClick={handleShare} variant="outline" size="sm" className="gap-2">
                    <Share2 className="h-4 w-4" />
                    {language === 'he' ? 'שתף' : 'Share'}
                  </Button>
                  
                  <Button onClick={handleResponses} variant="outline" size="sm" className="gap-2">
                    <BarChart3 className="h-4 w-4" />
                    {language === 'he' ? 'תגובות' : 'Responses'}
                  </Button>
                </div>
              </div>
            </CardHeader>
          </Card>
        </div>

        {/* Questions Preview */}
        <div className="space-y-6">
          <h3 className="text-xl font-semibold">
            {language === 'he' ? 'שאלות השאלון' : 'Questionnaire Questions'}
          </h3>
          
          {questionnaire.questions && questionnaire.questions.length > 0 ? (
            questionnaire.questions.map((question, index) => (
              <Card key={question.id} className="border border-border">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <CardTitle className="text-lg">
                        {language === 'he' ? `שאלה ${index + 1}` : `Question ${index + 1}`}
                        {question.is_required && (
                          <Badge variant="destructive" className="mr-2 text-xs">
                            {language === 'he' ? 'חובה' : 'Required'}
                          </Badge>
                        )}
                      </CardTitle>
                      <CardDescription className="mt-2">
                        {question.question_text || question.text || question.label || (language === 'he' ? 'ללא טקסט שאלה' : 'No question text')}
                      </CardDescription>
                    </div>
                    <Badge variant="outline" className="text-xs ml-4 flex-shrink-0">
                      {question.question_type || question.type || 'text'}
                    </Badge>
                  </div>
                </CardHeader>
                
                {question.options && question.options.length > 0 && (
                  <CardContent>
                    <div className="space-y-2">
                      <p className="font-medium text-sm text-muted-foreground">
                        {language === 'he' ? 'אפשרויות תשובה:' : 'Answer Options:'}
                      </p>
                      <div className="grid gap-2">
                        {question.options.map((option, optIndex) => (
                          <div key={option.id} className="flex items-center gap-2 p-3 bg-muted/50 rounded border">
                            <span className="text-sm font-medium text-muted-foreground min-w-[20px]">
                              {optIndex + 1}.
                            </span>
                            <span className="text-sm flex-1">
                              {option.label || option.value || (language === 'he' ? 'ללא תווית' : 'No label')}
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </CardContent>
                )}
                
                {(!question.options || question.options.length === 0) && (
                  <CardContent>
                    <p className="text-sm text-muted-foreground italic">
                      {language === 'he' ? 'שאלה ללא אפשרויות בחירה' : 'Question without choice options'}
                    </p>
                  </CardContent>
                )}
              </Card>
            ))
          ) : (
            <Card className="border border-border">
              <CardContent className="p-12 text-center">
                <p className="text-muted-foreground">
                  {language === 'he' ? 'אין שאלות בשאלון זה' : 'No questions in this questionnaire'}
                </p>
                <Button onClick={handleEdit} className="mt-4" variant="outline">
                  {language === 'he' ? 'הוסף שאלות' : 'Add Questions'}
                </Button>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Questionnaire Info */}
        <Card className="border border-border">
          <CardHeader>
            <CardTitle>
              {language === 'he' ? 'פרטי השאלון' : 'Questionnaire Details'}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <span className="font-medium">
                  {language === 'he' ? 'קטגוריה:' : 'Category:'}
                </span>
                <p className="text-muted-foreground">
                  {questionnaire.category || (language === 'he' ? 'לא נבחרה' : 'Not selected')}
                </p>
              </div>
              <div>
                <span className="font-medium">
                  {language === 'he' ? 'סטטוס:' : 'Status:'}
                </span>
                <p className="text-muted-foreground">
                  {questionnaire.status || (language === 'he' ? 'לא נקבע' : 'Not set')}
                </p>
              </div>
              <div>
                <span className="font-medium">
                  {language === 'he' ? 'נוצר:' : 'Created:'}
                </span>
                <p className="text-muted-foreground">
                  {new Date(questionnaire.created_at).toLocaleDateString(language === 'he' ? 'he-IL' : 'en-US')}
                </p>
              </div>
              <div>
                <span className="font-medium">
                  {language === 'he' ? 'מספר שאלות:' : 'Number of Questions:'}
                </span>
                <p className="text-muted-foreground">
                  {questionnaire.questions?.length || 0}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
